/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.aksw.simba.bengal.selector;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import java.util.ArrayList;
import java.util.Random;
import java.util.TreeSet;

/**
 *
 * @author ngonga
 */
public class SimpleSummarySelector extends AbstractSelector {

    Set<String> sourceClasses;
    Set<String> targetClasses;
    String endpoint;
    String graph;
    List<Resource> resources;
    Random r = new Random(20);
    int minSize = 1;
    int maxSize = 5;

    /**
     * Constructor
     * @param sourceClasses Classes for subjects
     * @param targetClasses Classes for objects
     * @param endpoint SPARQL endpoint
     * @param graph Graph to query (null if none)
     * @param minSize Minimal size of summary
     * @param maxSize Maximal size of summary
     */
    public SimpleSummarySelector(Set<String> sourceClasses, Set<String> targetClasses, String endpoint, String graph, int minSize, int maxSize) {
        this.sourceClasses = sourceClasses;
        this.targetClasses = targetClasses;
        this.endpoint = endpoint;
        this.graph = graph;
        resources = null;
        this.minSize = minSize;
        if (maxSize < minSize) {
            maxSize = minSize + 1;
        }
        this.maxSize = maxSize;
    }

    /**
     * Constructor
     * @param sourceClasses Classes for subjects
     * @param targetClasses Classes for objects
     * @param endpoint SPARQL endpoint
     * @param graph Graph to query (null if none)
     */
    public SimpleSummarySelector(Set<String> sourceClasses, Set<String> targetClasses, String endpoint, String graph) {
        this.sourceClasses = sourceClasses;
        this.targetClasses = targetClasses;        
        this.endpoint = endpoint;
        this.graph = graph;
        resources = null;
    }

    /** 
     * Returns the next set of statements generated by this selector
     * @return Set of statements
     */
    public List<Statement> getNextStatements() {
        if (resources == null) {
            resources = getResources(sourceClasses, endpoint, graph);
        }
        int counter = Math.abs(r.nextInt() % resources.size());
        //get symmetric CBD
        List<Statement> statements = getSummary(resources.get(counter));

        //now pick random statements
        Set<Statement> result = new HashSet<>();
        int size = minSize + r.nextInt(maxSize - minSize + 1);
        while (result.size() < size) {
            counter = Math.abs(r.nextInt() % statements.size());
            result.add(statements.get(counter));
        }
        System.out.println(result);
        return sortStatementsByHash(result);
    }

    /**
     * Gets a set of statements that summarize a resource r
     * @param r A resource
     * @return Summary (some CBD)
     */
    public List<Statement> getSummary(Resource r) {
        // one can use symmetric cbds here as well
        return getCBD(r, targetClasses, endpoint, graph);
    }

    public static void main(String args[]) {
        Set<String> classes = new HashSet<>();
        classes.add("<http://dbpedia.org/ontology/Person>");
        classes.add("<http://dbpedia.org/ontology/Place>");
        classes.add("<http://dbpedia.org/ontology/Organisation>");
        SimpleSummarySelector sss = new SimpleSummarySelector(classes, classes, "http://dbpedia.org/sparql", null);
        sss.getNextStatements();
        sss.getNextStatements();
    }
}
